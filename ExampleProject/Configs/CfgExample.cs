// ******************************************************************
//       /\ /|       @file       CfgExample.cs
//       \ V/        @brief      auto generated by RabiConfigGenerator. ./Excel/Example.xlsx
//       | "")       @author     Shadowrabbit, yingtu0401@gmail.com
//       /  |
//      /  \\        @Modified   2022-04-25 13:25:11
//    *(__\_\        @Copyright  Copyright (c)  2022, Shadowrabbit
// ******************************************************************

using RabiConfigLib;
using UnityEngine;
using System;
using System.Linq;
using System.Collections.Generic;

namespace ExampleProject.Configs
{
    public struct RowCfgExample
    {
        public string key; //key
        public string annotate; //注释
        public string defName; //有这列会自动为每个Key生成定义
        public string testStr; //测试字符串
        public float testFloat; //测试浮点值
        public int testInt; //测试整型值
        public bool testBool; //测试布尔值
        public List<bool> testListBool; //测试布尔数组
        public Dictionary<int,string> testDictionary; //测试字典
        public int groupId; //按这个ID数据分组
    }

    public class CfgExample
    {
        private readonly OrderedDictionary<string, RowCfgExample> _configs = new OrderedDictionary<string, RowCfgExample>(); //cfgId to row
        private readonly Dictionary<int, List<RowCfgExample>> _groupIdConfigGroup = new Dictionary<int, List<RowCfgExample>>();
        public RowCfgExample this[int key] => this[key.ToString()];
        public RowCfgExample this[string key] => _configs.ContainsKey(key) ? _configs[key] : throw new Exception($"Can't find config Cfg:{GetType()} key:{key}");
        public List<RowCfgExample> AllConfigs => _configs.Values.ToList();

        /// <summary>
        /// Retrieve row data
        /// </summary>
        public RowCfgExample Find(string i)
        {
            return this[i];
        }

        /// <summary>
        /// Load table data
        /// </summary>
        public void Load(CsvReader reader)
        {
            var dataMap = reader.GetDataMap();

            foreach (var data in dataMap.Values.Select(ParseRow))
            {
                _configs.TryAdd(data.key, data);
                if (!_groupIdConfigGroup.ContainsKey(data.groupId))
                {
                     _groupIdConfigGroup.Add(data.groupId, new List<RowCfgExample>());
                }

                _groupIdConfigGroup[data.groupId].Add(data);
            }
        }

        /// <summary>
        /// Retrieve grouping based on groupId value
        /// </summary>
        public List<RowCfgExample> GetListByGroupId(int groupValue)
        {
            return _groupIdConfigGroup.TryGetValue(groupValue, out var value) ? value : throw new Exception($"Can't find group Cfg:{GetType()} groupId:{groupValue}");
        }

        /// <summary>
        /// Parse rows
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        private RowCfgExample ParseRow(List<string>? col)
        {
            //Column index out of bounds
            if (col is { Count: < 10 })
            {
                Debug.LogError($"The configuration table field row index is out of bounds:{GetType()}");
                return default;
            }

            var data = new RowCfgExample();
            if (col == null) return data;
            var rowHelper = new RowHelper(col);
            data.key = CsvUtility.ToString(rowHelper.ReadNextCol()); //key
            data.annotate = CsvUtility.ToString(rowHelper.ReadNextCol()); //注释
            data.defName = CsvUtility.ToString(rowHelper.ReadNextCol()); //有这列会自动为每个Key生成定义
            data.testStr = CsvUtility.ToString(rowHelper.ReadNextCol()); //测试字符串
            data.testFloat = CsvUtility.ToFloat(rowHelper.ReadNextCol()); //测试浮点值
            data.testInt = CsvUtility.ToInt(rowHelper.ReadNextCol()); //测试整型值
            data.testBool = CsvUtility.ToBool(rowHelper.ReadNextCol()); //测试布尔值
            data.testListBool = CsvUtility.ToList<bool>(rowHelper.ReadNextCol()); //测试布尔数组
            data.testDictionary = CsvUtility.ToDictionary<int,string>(rowHelper.ReadNextCol()); //测试字典
            data.groupId = CsvUtility.ToInt(rowHelper.ReadNextCol()); //按这个ID数据分组
            return data;
        }
    }
}